name: Code Quality

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write

jobs:
  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-licenses: Apache-2.0, MIT, BSD-2-Clause, BSD-3-Clause, ISC

  validate-manifests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Generate manifests
      run: make manifests

    - name: Verify manifests are up to date
      run: |
        git diff --exit-code config/
        if [ $? -ne 0 ]; then
          echo "Generated manifests are out of date. Please run 'make manifests' and commit the changes."
          exit 1
        fi

    - name: Validate CRDs
      run: |
        # Install kubeconform
        curl -L https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz | tar xz
        sudo mv kubeconform /usr/local/bin/
        
        # Validate CRDs
        find config/crd/bases -name "*.yaml" -exec kubeconform -summary -verbose {} \;

    - name: Validate example manifests
      run: |
        # Validate all example YAML files
        find examples -name "*.yaml" -exec kubeconform -summary -verbose {} \;

  test-and-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Verify dependencies
      run: go mod verify

    - name: Build
      run: make build

    - name: Run go vet
      run: make vet

    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run tests
      run: make test

    - name: Run linting
      run: make lint

    - name: Check test coverage
      run: |
        go install github.com/vladopajic/go-test-coverage/v2@latest
        go-test-coverage --config=testcoverage.yml

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.qualitygate.wait=true
          -Dsonar.coverage.exclusions=cmd/main.go,controller/setup.go,tool/**,pkg/version/**,**/zz_generated.*.go
      continue-on-error: false

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./cover.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}