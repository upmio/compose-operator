name: Pull Request Checks

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      go: ${{ steps.changes.outputs.go }}
      charts: ${{ steps.changes.outputs.charts }}
      docs: ${{ steps.changes.outputs.docs }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          go:
            - '**/*.go'
            - 'go.mod'
            - 'go.sum'
            - 'Makefile'
          charts:
            - 'charts/**'
          docs:
            - 'docs/**'
            - '*.md'

  validate-pr:
    runs-on: ubuntu-latest
    steps:
    - name: Validate PR title
      uses: amannn/action-semantic-pull-request@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        types: |
          feat
          fix
          docs
          chore
          refactor
          test
          ci
        requireScope: false

  test-go:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.go == 'true'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.6'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Run tests with coverage
      run: make test

    - name: Run linting
      run: make lint

    - name: Check test coverage
      run: |
        go install github.com/vladopajic/go-test-coverage/v2/cmd/go-test-coverage@latest
        go-test-coverage --config=testcoverage.yml

    - name: Comment PR with coverage
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: cover.out

  validate-charts:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.charts == 'true'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: v3.14.0

    - name: Add Helm repos
      run: |
        helm repo add bitnami https://charts.bitnami.com/bitnami

    - name: Lint Helm charts
      run: helm lint charts/compose-operator

    - name: Template Helm charts
      run: |
        helm template compose-operator charts/compose-operator \
          --values charts/compose-operator/values.yaml \
          --output-dir /tmp/helm-output

    - name: Validate templated manifests
      run: |
        curl -L https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz | tar xz
        sudo mv kubeconform /usr/local/bin/
        find /tmp/helm-output -name "*.yaml" -exec kubeconform -summary -verbose {} \;

  security-check:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.go == 'true'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-no-fail -fmt sarif -out gosec.sarif ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif
      if: always()