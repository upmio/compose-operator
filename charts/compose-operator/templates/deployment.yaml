apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "compose-operator.fullname" . }}
  namespace: {{ $.Release.Namespace }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 8 }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels: {{ include "common.labels.standard" . | nindent 8 }}
    spec:
      restartPolicy: Always
      {{- include "compose-operator.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ template "compose-operator.serviceAccountName" . }}
      containers:
      - name: {{ .Chart.Name }}
        image: {{ template "compose-operator.image" . }}
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        envFrom:
        - secretRef:
            name: {{ include "compose-operator.fullname" . }}-aes-secret
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.livenessProbe "enabled") "context" $) | nindent 10 }}
          httpGet:
            path: /healthz
            port: 8081
        {{- end}}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.readinessProbe "enabled") "context" $) | nindent 10 }}
          httpGet:
            path: /healthz
            port: 8081
        {{- end}}
        {{- if .Values.startupProbe.enabled }}
        startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.startupProbe "enabled") "context" $) | nindent 10 }}
          httpGet:
            path: /healthz
            port: 8081
        {{- end}}
        {{- if .Values.webhook.enabled }}
        ports:
        - containerPort: {{ .Values.webhook.port }}
          name: webhook-server
          protocol: TCP
        volumeMounts:
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
        {{- end }}
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
      {{- if .Values.webhook.enabled }}
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: {{ include "compose-operator.fullname" . }}-webhook-server-certs
      {{- end }}