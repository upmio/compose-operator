//go:build !ignore_autogenerated

/*
Copyright 2025 The Compose Operator Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

SPDX-License-Identifier: Apache-2.0
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AESSecret) DeepCopyInto(out *AESSecret) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AESSecret.
func (in *AESSecret) DeepCopy() *AESSecret {
	if in == nil {
		return nil
	}
	out := new(AESSecret)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CommonNode) DeepCopyInto(out *CommonNode) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CommonNode.
func (in *CommonNode) DeepCopy() *CommonNode {
	if in == nil {
		return nil
	}
	out := new(CommonNode)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in CommonNodes) DeepCopyInto(out *CommonNodes) {
	{
		in := &in
		*out = make(CommonNodes, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(CommonNode)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CommonNodes.
func (in CommonNodes) DeepCopy() CommonNodes {
	if in == nil {
		return nil
	}
	out := new(CommonNodes)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongoDBReplicaSet) DeepCopyInto(out *MongoDBReplicaSet) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongoDBReplicaSet.
func (in *MongoDBReplicaSet) DeepCopy() *MongoDBReplicaSet {
	if in == nil {
		return nil
	}
	out := new(MongoDBReplicaSet)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MongoDBReplicaSet) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongoDBReplicaSetList) DeepCopyInto(out *MongoDBReplicaSetList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]MongoDBReplicaSet, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongoDBReplicaSetList.
func (in *MongoDBReplicaSetList) DeepCopy() *MongoDBReplicaSetList {
	if in == nil {
		return nil
	}
	out := new(MongoDBReplicaSetList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MongoDBReplicaSetList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongoDBReplicaSetNode) DeepCopyInto(out *MongoDBReplicaSetNode) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongoDBReplicaSetNode.
func (in *MongoDBReplicaSetNode) DeepCopy() *MongoDBReplicaSetNode {
	if in == nil {
		return nil
	}
	out := new(MongoDBReplicaSetNode)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongoDBReplicaSetSecret) DeepCopyInto(out *MongoDBReplicaSetSecret) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongoDBReplicaSetSecret.
func (in *MongoDBReplicaSetSecret) DeepCopy() *MongoDBReplicaSetSecret {
	if in == nil {
		return nil
	}
	out := new(MongoDBReplicaSetSecret)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongoDBReplicaSetSpec) DeepCopyInto(out *MongoDBReplicaSetSpec) {
	*out = *in
	out.Secret = in.Secret
	if in.AESSecret != nil {
		in, out := &in.AESSecret, &out.AESSecret
		*out = new(AESSecret)
		**out = **in
	}
	if in.Member != nil {
		in, out := &in.Member, &out.Member
		*out = make(CommonNodes, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(CommonNode)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongoDBReplicaSetSpec.
func (in *MongoDBReplicaSetSpec) DeepCopy() *MongoDBReplicaSetSpec {
	if in == nil {
		return nil
	}
	out := new(MongoDBReplicaSetSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongoDBReplicaSetStatus) DeepCopyInto(out *MongoDBReplicaSetStatus) {
	*out = *in
	if in.Topology != nil {
		in, out := &in.Topology, &out.Topology
		*out = make(MongoDBReplicaSetTopology, len(*in))
		for key, val := range *in {
			var outVal *MongoDBReplicaSetNode
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(MongoDBReplicaSetNode)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongoDBReplicaSetStatus.
func (in *MongoDBReplicaSetStatus) DeepCopy() *MongoDBReplicaSetStatus {
	if in == nil {
		return nil
	}
	out := new(MongoDBReplicaSetStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in MongoDBReplicaSetTopology) DeepCopyInto(out *MongoDBReplicaSetTopology) {
	{
		in := &in
		*out = make(MongoDBReplicaSetTopology, len(*in))
		for key, val := range *in {
			var outVal *MongoDBReplicaSetNode
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(MongoDBReplicaSetNode)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongoDBReplicaSetTopology.
func (in MongoDBReplicaSetTopology) DeepCopy() MongoDBReplicaSetTopology {
	if in == nil {
		return nil
	}
	out := new(MongoDBReplicaSetTopology)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlGroupReplication) DeepCopyInto(out *MysqlGroupReplication) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlGroupReplication.
func (in *MysqlGroupReplication) DeepCopy() *MysqlGroupReplication {
	if in == nil {
		return nil
	}
	out := new(MysqlGroupReplication)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MysqlGroupReplication) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlGroupReplicationList) DeepCopyInto(out *MysqlGroupReplicationList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]MysqlGroupReplication, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlGroupReplicationList.
func (in *MysqlGroupReplicationList) DeepCopy() *MysqlGroupReplicationList {
	if in == nil {
		return nil
	}
	out := new(MysqlGroupReplicationList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MysqlGroupReplicationList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlGroupReplicationNode) DeepCopyInto(out *MysqlGroupReplicationNode) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlGroupReplicationNode.
func (in *MysqlGroupReplicationNode) DeepCopy() *MysqlGroupReplicationNode {
	if in == nil {
		return nil
	}
	out := new(MysqlGroupReplicationNode)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlGroupReplicationSecret) DeepCopyInto(out *MysqlGroupReplicationSecret) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlGroupReplicationSecret.
func (in *MysqlGroupReplicationSecret) DeepCopy() *MysqlGroupReplicationSecret {
	if in == nil {
		return nil
	}
	out := new(MysqlGroupReplicationSecret)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlGroupReplicationSpec) DeepCopyInto(out *MysqlGroupReplicationSpec) {
	*out = *in
	out.Secret = in.Secret
	if in.AESSecret != nil {
		in, out := &in.AESSecret, &out.AESSecret
		*out = new(AESSecret)
		**out = **in
	}
	if in.Member != nil {
		in, out := &in.Member, &out.Member
		*out = make(CommonNodes, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(CommonNode)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlGroupReplicationSpec.
func (in *MysqlGroupReplicationSpec) DeepCopy() *MysqlGroupReplicationSpec {
	if in == nil {
		return nil
	}
	out := new(MysqlGroupReplicationSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlGroupReplicationStatus) DeepCopyInto(out *MysqlGroupReplicationStatus) {
	*out = *in
	if in.Topology != nil {
		in, out := &in.Topology, &out.Topology
		*out = make(MysqlGroupReplicationTopology, len(*in))
		for key, val := range *in {
			var outVal *MysqlGroupReplicationNode
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(MysqlGroupReplicationNode)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlGroupReplicationStatus.
func (in *MysqlGroupReplicationStatus) DeepCopy() *MysqlGroupReplicationStatus {
	if in == nil {
		return nil
	}
	out := new(MysqlGroupReplicationStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in MysqlGroupReplicationTopology) DeepCopyInto(out *MysqlGroupReplicationTopology) {
	{
		in := &in
		*out = make(MysqlGroupReplicationTopology, len(*in))
		for key, val := range *in {
			var outVal *MysqlGroupReplicationNode
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(MysqlGroupReplicationNode)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlGroupReplicationTopology.
func (in MysqlGroupReplicationTopology) DeepCopy() MysqlGroupReplicationTopology {
	if in == nil {
		return nil
	}
	out := new(MysqlGroupReplicationTopology)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlReplication) DeepCopyInto(out *MysqlReplication) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlReplication.
func (in *MysqlReplication) DeepCopy() *MysqlReplication {
	if in == nil {
		return nil
	}
	out := new(MysqlReplication)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MysqlReplication) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlReplicationList) DeepCopyInto(out *MysqlReplicationList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]MysqlReplication, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlReplicationList.
func (in *MysqlReplicationList) DeepCopy() *MysqlReplicationList {
	if in == nil {
		return nil
	}
	out := new(MysqlReplicationList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MysqlReplicationList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlReplicationNode) DeepCopyInto(out *MysqlReplicationNode) {
	*out = *in
	if in.SecondsBehindSource != nil {
		in, out := &in.SecondsBehindSource, &out.SecondsBehindSource
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlReplicationNode.
func (in *MysqlReplicationNode) DeepCopy() *MysqlReplicationNode {
	if in == nil {
		return nil
	}
	out := new(MysqlReplicationNode)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlReplicationSecret) DeepCopyInto(out *MysqlReplicationSecret) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlReplicationSecret.
func (in *MysqlReplicationSecret) DeepCopy() *MysqlReplicationSecret {
	if in == nil {
		return nil
	}
	out := new(MysqlReplicationSecret)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlReplicationSpec) DeepCopyInto(out *MysqlReplicationSpec) {
	*out = *in
	out.Secret = in.Secret
	if in.AESSecret != nil {
		in, out := &in.AESSecret, &out.AESSecret
		*out = new(AESSecret)
		**out = **in
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = new(CommonNode)
		**out = **in
	}
	if in.Service != nil {
		in, out := &in.Service, &out.Service
		*out = new(Service)
		**out = **in
	}
	if in.Replica != nil {
		in, out := &in.Replica, &out.Replica
		*out = make(ReplicaNodes, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(ReplicaNode)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlReplicationSpec.
func (in *MysqlReplicationSpec) DeepCopy() *MysqlReplicationSpec {
	if in == nil {
		return nil
	}
	out := new(MysqlReplicationSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlReplicationStatus) DeepCopyInto(out *MysqlReplicationStatus) {
	*out = *in
	if in.Topology != nil {
		in, out := &in.Topology, &out.Topology
		*out = make(MysqlReplicationTopology, len(*in))
		for key, val := range *in {
			var outVal *MysqlReplicationNode
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(MysqlReplicationNode)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlReplicationStatus.
func (in *MysqlReplicationStatus) DeepCopy() *MysqlReplicationStatus {
	if in == nil {
		return nil
	}
	out := new(MysqlReplicationStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in MysqlReplicationTopology) DeepCopyInto(out *MysqlReplicationTopology) {
	{
		in := &in
		*out = make(MysqlReplicationTopology, len(*in))
		for key, val := range *in {
			var outVal *MysqlReplicationNode
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(MysqlReplicationNode)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlReplicationTopology.
func (in MysqlReplicationTopology) DeepCopy() MysqlReplicationTopology {
	if in == nil {
		return nil
	}
	out := new(MysqlReplicationTopology)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresReplication) DeepCopyInto(out *PostgresReplication) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresReplication.
func (in *PostgresReplication) DeepCopy() *PostgresReplication {
	if in == nil {
		return nil
	}
	out := new(PostgresReplication)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PostgresReplication) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresReplicationList) DeepCopyInto(out *PostgresReplicationList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]PostgresReplication, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresReplicationList.
func (in *PostgresReplicationList) DeepCopy() *PostgresReplicationList {
	if in == nil {
		return nil
	}
	out := new(PostgresReplicationList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PostgresReplicationList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresReplicationNode) DeepCopyInto(out *PostgresReplicationNode) {
	*out = *in
	if in.WalDiff != nil {
		in, out := &in.WalDiff, &out.WalDiff
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresReplicationNode.
func (in *PostgresReplicationNode) DeepCopy() *PostgresReplicationNode {
	if in == nil {
		return nil
	}
	out := new(PostgresReplicationNode)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresReplicationSecret) DeepCopyInto(out *PostgresReplicationSecret) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresReplicationSecret.
func (in *PostgresReplicationSecret) DeepCopy() *PostgresReplicationSecret {
	if in == nil {
		return nil
	}
	out := new(PostgresReplicationSecret)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresReplicationSpec) DeepCopyInto(out *PostgresReplicationSpec) {
	*out = *in
	out.Secret = in.Secret
	if in.AESSecret != nil {
		in, out := &in.AESSecret, &out.AESSecret
		*out = new(AESSecret)
		**out = **in
	}
	if in.Primary != nil {
		in, out := &in.Primary, &out.Primary
		*out = new(CommonNode)
		**out = **in
	}
	if in.Service != nil {
		in, out := &in.Service, &out.Service
		*out = new(Service)
		**out = **in
	}
	if in.Standby != nil {
		in, out := &in.Standby, &out.Standby
		*out = make(CommonNodes, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(CommonNode)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresReplicationSpec.
func (in *PostgresReplicationSpec) DeepCopy() *PostgresReplicationSpec {
	if in == nil {
		return nil
	}
	out := new(PostgresReplicationSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresReplicationStatus) DeepCopyInto(out *PostgresReplicationStatus) {
	*out = *in
	if in.Topology != nil {
		in, out := &in.Topology, &out.Topology
		*out = make(PostgresReplicationTopology, len(*in))
		for key, val := range *in {
			var outVal *PostgresReplicationNode
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(PostgresReplicationNode)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresReplicationStatus.
func (in *PostgresReplicationStatus) DeepCopy() *PostgresReplicationStatus {
	if in == nil {
		return nil
	}
	out := new(PostgresReplicationStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in PostgresReplicationTopology) DeepCopyInto(out *PostgresReplicationTopology) {
	{
		in := &in
		*out = make(PostgresReplicationTopology, len(*in))
		for key, val := range *in {
			var outVal *PostgresReplicationNode
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(PostgresReplicationNode)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresReplicationTopology.
func (in PostgresReplicationTopology) DeepCopy() PostgresReplicationTopology {
	if in == nil {
		return nil
	}
	out := new(PostgresReplicationTopology)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProxysqlSync) DeepCopyInto(out *ProxysqlSync) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProxysqlSync.
func (in *ProxysqlSync) DeepCopy() *ProxysqlSync {
	if in == nil {
		return nil
	}
	out := new(ProxysqlSync)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ProxysqlSync) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProxysqlSyncList) DeepCopyInto(out *ProxysqlSyncList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ProxysqlSync, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProxysqlSyncList.
func (in *ProxysqlSyncList) DeepCopy() *ProxysqlSyncList {
	if in == nil {
		return nil
	}
	out := new(ProxysqlSyncList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ProxysqlSyncList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProxysqlSyncNode) DeepCopyInto(out *ProxysqlSyncNode) {
	*out = *in
	if in.Users != nil {
		in, out := &in.Users, &out.Users
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProxysqlSyncNode.
func (in *ProxysqlSyncNode) DeepCopy() *ProxysqlSyncNode {
	if in == nil {
		return nil
	}
	out := new(ProxysqlSyncNode)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProxysqlSyncSecret) DeepCopyInto(out *ProxysqlSyncSecret) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProxysqlSyncSecret.
func (in *ProxysqlSyncSecret) DeepCopy() *ProxysqlSyncSecret {
	if in == nil {
		return nil
	}
	out := new(ProxysqlSyncSecret)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProxysqlSyncSpec) DeepCopyInto(out *ProxysqlSyncSpec) {
	*out = *in
	if in.Proxysql != nil {
		in, out := &in.Proxysql, &out.Proxysql
		*out = make(CommonNodes, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(CommonNode)
				**out = **in
			}
		}
	}
	out.Secret = in.Secret
	if in.AESSecret != nil {
		in, out := &in.AESSecret, &out.AESSecret
		*out = new(AESSecret)
		**out = **in
	}
	if in.Rule != nil {
		in, out := &in.Rule, &out.Rule
		*out = new(Rule)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProxysqlSyncSpec.
func (in *ProxysqlSyncSpec) DeepCopy() *ProxysqlSyncSpec {
	if in == nil {
		return nil
	}
	out := new(ProxysqlSyncSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProxysqlSyncStatus) DeepCopyInto(out *ProxysqlSyncStatus) {
	*out = *in
	if in.Topology != nil {
		in, out := &in.Topology, &out.Topology
		*out = make(ProxysqlSyncTopology, len(*in))
		for key, val := range *in {
			var outVal *ProxysqlSyncNode
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(ProxysqlSyncNode)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProxysqlSyncStatus.
func (in *ProxysqlSyncStatus) DeepCopy() *ProxysqlSyncStatus {
	if in == nil {
		return nil
	}
	out := new(ProxysqlSyncStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in ProxysqlSyncTopology) DeepCopyInto(out *ProxysqlSyncTopology) {
	{
		in := &in
		*out = make(ProxysqlSyncTopology, len(*in))
		for key, val := range *in {
			var outVal *ProxysqlSyncNode
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(ProxysqlSyncNode)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProxysqlSyncTopology.
func (in ProxysqlSyncTopology) DeepCopy() ProxysqlSyncTopology {
	if in == nil {
		return nil
	}
	out := new(ProxysqlSyncTopology)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisCluster) DeepCopyInto(out *RedisCluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisCluster.
func (in *RedisCluster) DeepCopy() *RedisCluster {
	if in == nil {
		return nil
	}
	out := new(RedisCluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RedisCluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterList) DeepCopyInto(out *RedisClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]RedisCluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterList.
func (in *RedisClusterList) DeepCopy() *RedisClusterList {
	if in == nil {
		return nil
	}
	out := new(RedisClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RedisClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterNode) DeepCopyInto(out *RedisClusterNode) {
	*out = *in
	if in.Slots != nil {
		in, out := &in.Slots, &out.Slots
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterNode.
func (in *RedisClusterNode) DeepCopy() *RedisClusterNode {
	if in == nil {
		return nil
	}
	out := new(RedisClusterNode)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterSecret) DeepCopyInto(out *RedisClusterSecret) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterSecret.
func (in *RedisClusterSecret) DeepCopy() *RedisClusterSecret {
	if in == nil {
		return nil
	}
	out := new(RedisClusterSecret)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterSpec) DeepCopyInto(out *RedisClusterSpec) {
	*out = *in
	out.Secret = in.Secret
	if in.AESSecret != nil {
		in, out := &in.AESSecret, &out.AESSecret
		*out = new(AESSecret)
		**out = **in
	}
	if in.Members != nil {
		in, out := &in.Members, &out.Members
		*out = make(map[string]CommonNodes, len(*in))
		for key, val := range *in {
			var outVal []*CommonNode
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make(CommonNodes, len(*in))
				for i := range *in {
					if (*in)[i] != nil {
						in, out := &(*in)[i], &(*out)[i]
						*out = new(CommonNode)
						**out = **in
					}
				}
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterSpec.
func (in *RedisClusterSpec) DeepCopy() *RedisClusterSpec {
	if in == nil {
		return nil
	}
	out := new(RedisClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterStatus) DeepCopyInto(out *RedisClusterStatus) {
	*out = *in
	if in.Topology != nil {
		in, out := &in.Topology, &out.Topology
		*out = make(RedisClusterTopology, len(*in))
		for key, val := range *in {
			var outVal *RedisClusterNode
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(RedisClusterNode)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterStatus.
func (in *RedisClusterStatus) DeepCopy() *RedisClusterStatus {
	if in == nil {
		return nil
	}
	out := new(RedisClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in RedisClusterTopology) DeepCopyInto(out *RedisClusterTopology) {
	{
		in := &in
		*out = make(RedisClusterTopology, len(*in))
		for key, val := range *in {
			var outVal *RedisClusterNode
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(RedisClusterNode)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterTopology.
func (in RedisClusterTopology) DeepCopy() RedisClusterTopology {
	if in == nil {
		return nil
	}
	out := new(RedisClusterTopology)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisNode) DeepCopyInto(out *RedisNode) {
	*out = *in
	out.CommonNode = in.CommonNode
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisNode.
func (in *RedisNode) DeepCopy() *RedisNode {
	if in == nil {
		return nil
	}
	out := new(RedisNode)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in RedisNodes) DeepCopyInto(out *RedisNodes) {
	{
		in := &in
		*out = make(RedisNodes, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(RedisNode)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisNodes.
func (in RedisNodes) DeepCopy() RedisNodes {
	if in == nil {
		return nil
	}
	out := new(RedisNodes)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisReplication) DeepCopyInto(out *RedisReplication) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisReplication.
func (in *RedisReplication) DeepCopy() *RedisReplication {
	if in == nil {
		return nil
	}
	out := new(RedisReplication)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RedisReplication) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisReplicationList) DeepCopyInto(out *RedisReplicationList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]RedisReplication, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisReplicationList.
func (in *RedisReplicationList) DeepCopy() *RedisReplicationList {
	if in == nil {
		return nil
	}
	out := new(RedisReplicationList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RedisReplicationList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisReplicationNode) DeepCopyInto(out *RedisReplicationNode) {
	*out = *in
	if in.MasterSyncInProgress != nil {
		in, out := &in.MasterSyncInProgress, &out.MasterSyncInProgress
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisReplicationNode.
func (in *RedisReplicationNode) DeepCopy() *RedisReplicationNode {
	if in == nil {
		return nil
	}
	out := new(RedisReplicationNode)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisReplicationSecret) DeepCopyInto(out *RedisReplicationSecret) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisReplicationSecret.
func (in *RedisReplicationSecret) DeepCopy() *RedisReplicationSecret {
	if in == nil {
		return nil
	}
	out := new(RedisReplicationSecret)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisReplicationSpec) DeepCopyInto(out *RedisReplicationSpec) {
	*out = *in
	out.Secret = in.Secret
	if in.AESSecret != nil {
		in, out := &in.AESSecret, &out.AESSecret
		*out = new(AESSecret)
		**out = **in
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = new(RedisNode)
		**out = **in
	}
	if in.Replica != nil {
		in, out := &in.Replica, &out.Replica
		*out = make(RedisNodes, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(RedisNode)
				**out = **in
			}
		}
	}
	if in.Service != nil {
		in, out := &in.Service, &out.Service
		*out = new(Service)
		**out = **in
	}
	if in.Sentinel != nil {
		in, out := &in.Sentinel, &out.Sentinel
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisReplicationSpec.
func (in *RedisReplicationSpec) DeepCopy() *RedisReplicationSpec {
	if in == nil {
		return nil
	}
	out := new(RedisReplicationSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisReplicationStatus) DeepCopyInto(out *RedisReplicationStatus) {
	*out = *in
	if in.Topology != nil {
		in, out := &in.Topology, &out.Topology
		*out = make(RedisReplicationTopology, len(*in))
		for key, val := range *in {
			var outVal *RedisReplicationNode
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(RedisReplicationNode)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisReplicationStatus.
func (in *RedisReplicationStatus) DeepCopy() *RedisReplicationStatus {
	if in == nil {
		return nil
	}
	out := new(RedisReplicationStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in RedisReplicationTopology) DeepCopyInto(out *RedisReplicationTopology) {
	{
		in := &in
		*out = make(RedisReplicationTopology, len(*in))
		for key, val := range *in {
			var outVal *RedisReplicationNode
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(RedisReplicationNode)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisReplicationTopology.
func (in RedisReplicationTopology) DeepCopy() RedisReplicationTopology {
	if in == nil {
		return nil
	}
	out := new(RedisReplicationTopology)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReplicaNode) DeepCopyInto(out *ReplicaNode) {
	*out = *in
	out.CommonNode = in.CommonNode
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReplicaNode.
func (in *ReplicaNode) DeepCopy() *ReplicaNode {
	if in == nil {
		return nil
	}
	out := new(ReplicaNode)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in ReplicaNodes) DeepCopyInto(out *ReplicaNodes) {
	{
		in := &in
		*out = make(ReplicaNodes, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(ReplicaNode)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReplicaNodes.
func (in ReplicaNodes) DeepCopy() ReplicaNodes {
	if in == nil {
		return nil
	}
	out := new(ReplicaNodes)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Rule) DeepCopyInto(out *Rule) {
	*out = *in
	if in.Filter != nil {
		in, out := &in.Filter, &out.Filter
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Rule.
func (in *Rule) DeepCopy() *Rule {
	if in == nil {
		return nil
	}
	out := new(Rule)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Service) DeepCopyInto(out *Service) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Service.
func (in *Service) DeepCopy() *Service {
	if in == nil {
		return nil
	}
	out := new(Service)
	in.DeepCopyInto(out)
	return out
}
